/* automatically generated by rust-bindgen 0.63.0 */

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[allow(unused_imports)]
    use self::super::root;
    pub type DWORD = ::std::os::raw::c_ulong;
    pub type BOOL = ::std::os::raw::c_int;
    pub type BYTE = ::std::os::raw::c_uchar;
    pub type WORD = ::std::os::raw::c_ushort;
    pub type LPVOID = *mut ::std::os::raw::c_void;
    pub type ULONG_PTR = ::std::os::raw::c_ulonglong;
    pub type SIZE_T = root::ULONG_PTR;
    pub type DWORD64 = ::std::os::raw::c_ulonglong;
    pub type HANDLE = *mut ::std::os::raw::c_void;
    pub type LONGLONG = ::std::os::raw::c_longlong;
    pub type ULONGLONG = ::std::os::raw::c_ulonglong;
    #[repr(C)]
    #[repr(align(16))]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct _M128A {
        pub Low: root::ULONGLONG,
        pub High: root::LONGLONG,
    }
    #[repr(C)]
    #[repr(align(16))]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct _MEMORY_BASIC_INFORMATION64 {
        pub BaseAddress: root::ULONGLONG,
        pub AllocationBase: root::ULONGLONG,
        pub AllocationProtect: root::DWORD,
        pub __alignment1: root::DWORD,
        pub RegionSize: root::ULONGLONG,
        pub State: root::DWORD,
        pub Protect: root::DWORD,
        pub Type: root::DWORD,
        pub __alignment2: root::DWORD,
    }
    pub type MEMORY_BASIC_INFORMATION64 = root::_MEMORY_BASIC_INFORMATION64;
    #[repr(C)]
    #[repr(align(16))]
    #[derive(Debug, Copy, Clone)]
    pub struct _XSAVE_FORMAT64 {
        pub ControlWord: root::WORD,
        pub StatusWord: root::WORD,
        pub TagWord: root::BYTE,
        pub Reserved1: root::BYTE,
        pub ErrorOpcode: root::WORD,
        pub ErrorOffset: root::DWORD,
        pub ErrorSelector: root::WORD,
        pub Reserved2: root::WORD,
        pub DataOffset: root::DWORD,
        pub DataSelector: root::WORD,
        pub Reserved3: root::WORD,
        pub MxCsr: root::DWORD,
        pub MxCsr_Mask: root::DWORD,
        pub FloatRegisters: [root::_M128A; 8usize],
        pub XmmRegisters: [root::_M128A; 16usize],
        pub Reserved4: [root::BYTE; 96usize],
    }
    impl Default for _XSAVE_FORMAT64 {
        fn default() -> Self {
            let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
            unsafe {
                ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
                s.assume_init()
            }
        }
    }
    #[repr(C)]
    #[repr(align(16))]
    #[derive(Debug, Copy, Clone)]
    pub struct _CONTEXT64_2 {
        pub P1Home: root::DWORD64,
        pub P2Home: root::DWORD64,
        pub P3Home: root::DWORD64,
        pub P4Home: root::DWORD64,
        pub P5Home: root::DWORD64,
        pub P6Home: root::DWORD64,
        pub ContextFlags: root::DWORD,
        pub MxCsr: root::DWORD,
        pub SegCs: root::WORD,
        pub SegDs: root::WORD,
        pub SegEs: root::WORD,
        pub SegFs: root::WORD,
        pub SegGs: root::WORD,
        pub SegSs: root::WORD,
        pub EFlags: root::DWORD,
        pub Dr0: root::DWORD64,
        pub Dr1: root::DWORD64,
        pub Dr2: root::DWORD64,
        pub Dr3: root::DWORD64,
        pub Dr6: root::DWORD64,
        pub Dr7: root::DWORD64,
        pub Rax: root::DWORD64,
        pub Rcx: root::DWORD64,
        pub Rdx: root::DWORD64,
        pub Rbx: root::DWORD64,
        pub Rsp: root::DWORD64,
        pub Rbp: root::DWORD64,
        pub Rsi: root::DWORD64,
        pub Rdi: root::DWORD64,
        pub R8: root::DWORD64,
        pub R9: root::DWORD64,
        pub R10: root::DWORD64,
        pub R11: root::DWORD64,
        pub R12: root::DWORD64,
        pub R13: root::DWORD64,
        pub R14: root::DWORD64,
        pub R15: root::DWORD64,
        pub Rip: root::DWORD64,
        pub FltSave: root::_XSAVE_FORMAT64,
        pub Header: [root::_M128A; 2usize],
        pub Legacy: [root::_M128A; 8usize],
        pub Xmm0: root::_M128A,
        pub Xmm1: root::_M128A,
        pub Xmm2: root::_M128A,
        pub Xmm3: root::_M128A,
        pub Xmm4: root::_M128A,
        pub Xmm5: root::_M128A,
        pub Xmm6: root::_M128A,
        pub Xmm7: root::_M128A,
        pub Xmm8: root::_M128A,
        pub Xmm9: root::_M128A,
        pub Xmm10: root::_M128A,
        pub Xmm11: root::_M128A,
        pub Xmm12: root::_M128A,
        pub Xmm13: root::_M128A,
        pub Xmm14: root::_M128A,
        pub Xmm15: root::_M128A,
        pub VectorRegister: [root::_M128A; 26usize],
        pub VectorControl: root::DWORD64,
        pub DebugControl: root::DWORD64,
        pub LastBranchToRip: root::DWORD64,
        pub LastBranchFromRip: root::DWORD64,
        pub LastExceptionToRip: root::DWORD64,
        pub LastExceptionFromRip: root::DWORD64,
    }
    impl Default for _CONTEXT64_2 {
        fn default() -> Self {
            let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
            unsafe {
                ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
                s.assume_init()
            }
        }
    }
    extern "C" {
        pub fn X64Call(func: root::DWORD64, argC: ::std::os::raw::c_int, ...) -> root::DWORD64;
    }
    extern "C" {
        pub fn GetModuleHandle64(lpModuleName: *const u16) -> root::DWORD64;
    }
    extern "C" {
        pub fn getNTDLL64() -> root::DWORD64;
    }
    extern "C" {
        pub fn GetProcAddress64(
            hModule: root::DWORD64,
            funcName: *const ::std::os::raw::c_char,
        ) -> root::DWORD64;
    }
    extern "C" {
        pub fn VirtualQueryEx64(
            hProcess: root::HANDLE,
            lpAddress: root::DWORD64,
            lpBuffer: *mut root::MEMORY_BASIC_INFORMATION64,
            dwLength: root::SIZE_T,
        ) -> root::SIZE_T;
    }
    extern "C" {
        pub fn VirtualAllocEx64(
            hProcess: root::HANDLE,
            lpAddress: root::DWORD64,
            dwSize: root::SIZE_T,
            flAllocationType: root::DWORD,
            flProtect: root::DWORD,
        ) -> root::DWORD64;
    }
    extern "C" {
        pub fn VirtualFreeEx64(
            hProcess: root::HANDLE,
            lpAddress: root::DWORD64,
            dwSize: root::SIZE_T,
            dwFreeType: root::DWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn VirtualProtectEx64(
            hProcess: root::HANDLE,
            lpAddress: root::DWORD64,
            dwSize: root::SIZE_T,
            flNewProtect: root::DWORD,
            lpflOldProtect: *mut root::DWORD,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn ReadProcessMemory64(
            hProcess: root::HANDLE,
            lpBaseAddress: root::DWORD64,
            lpBuffer: root::LPVOID,
            nSize: root::SIZE_T,
            lpNumberOfBytesRead: *mut root::SIZE_T,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn WriteProcessMemory64(
            hProcess: root::HANDLE,
            lpBaseAddress: root::DWORD64,
            lpBuffer: root::LPVOID,
            nSize: root::SIZE_T,
            lpNumberOfBytesWritten: *mut root::SIZE_T,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn GetThreadContext64(
            hThread: root::HANDLE,
            lpContext: *mut root::_CONTEXT64_2,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetThreadContext64(
            hThread: root::HANDLE,
            lpContext: *mut root::_CONTEXT64_2,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn SetLastErrorFromX64Call(status: root::DWORD64);
    }
}
